{"version":3,"sources":["pages/DeliveryNew.js","pages/DeliveryShow.js","ethereum/web3.js","ethereum/variables.js","../node_modules/web3-eth-accounts/src sync","components/Header.js","components/DeliveryRow.js","pages/Home.js","App.js","registerServiceWorker.js","index.js","ethereum/factory.js","ethereum/notification.js"],"names":["bigInt","require","DeliveryNew","state","receiver","message","term1","term2","deposit","loading","errorMessage","onSubmit","event","a","preventDefault","setState","p","variables","substr","g","r","ya","messageSentBuffer","Buffer","from","messageSent","toString","c1","modPow","c2","multiply","web3","eth","getAccounts","accounts","factory","methods","createDelivery","send","value","alert","props","history","push","to","this","error","Field","onChange","target","label","labelPosition","header","content","primary","Component","withRouter","dateFormat","DeliveryShow","address","sender","start","z1","z2","yb","c","w","componentDidMount","match","params","deliveryContract","notification","getBalance","call","receivers","getState","receiversState","d","Date","setUTCSeconds","xb","wBig","cBig","pBig","c2Big","yaBig","subtract","mod","messageReceived","divide","inverted","active","readOnly","as","color","horizontal","window","Web3","currentProvider","addEventListener","ethereum","enable","q","xa","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","Menu","stackable","style","marginTop","Item","Link","position","DeliveryRow","delivery","onView","onAccept","contractAddress","randBetween","minus","s","accept","onFinish","add","finish","Table","Row","Cell","Label","sent","Button","animated","onClick","disabled","Content","hidden","visible","Icon","name","Message","Home","loadingPage","getSenderDeliveriesCount","senderDeliveriesCount","getReceiverDeliveriesCount","receiverDeliveriesCount","Promise","all","Array","parseInt","fill","map","index","senderDeliveries","receiverDeliveries","key","Segment","height","Dimmer","Loader","circular","fixed","Header","HeaderCell","Body","renderDeliveryRows","icon","App","Container","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","DeliveryFactory","instance","Contract","JSON","parse","interface","Delivery"],"mappings":"oUAOMA,EAASC,EAAQ,KAEjBC,E,4MACJC,MAAQ,CACNC,SAAU,GACVC,QAAS,GACTC,MAAO,GACPC,MAAO,GACPC,QAAS,GACTC,SAAS,EACTC,aAAc,I,EAGhBC,S,uCAAW,WAAMC,GAAN,+BAAAC,EAAA,6DACTD,EAAME,iBAEN,EAAKC,SAAS,CAAEN,SAAS,EAAMC,aAAc,KAHpC,SASDM,EAAIhB,EAAOiB,IAAUD,EAAEE,OAAO,GAAI,IAClCC,EAAInB,EAAOiB,IAAUE,EAAED,OAAO,GAAI,IAElCE,EAAIpB,EAAOiB,IAAUG,EAAEF,OAAO,GAAI,IAElCG,EAAKrB,EAAOiB,IAAUI,GAAGH,OAAO,GAAI,IAEpCI,EAAoBC,EAAOC,KAAK,EAAKrB,MAAME,QAAS,QACpDoB,EAAczB,EAAOsB,EAAkBI,SAAS,OAAQ,IAG5DC,EAAKR,EAAES,OAAOR,EAAGJ,GAGjBa,EAAKJ,EAAYK,SAAST,EAAGO,OAAOR,EAAGJ,IAvBlC,UAyBkBe,IAAKC,IAAIC,cAzB3B,eAyBCC,EAzBD,iBA0BCC,IAAQC,QACTC,eAAe,CAAC,EAAKlC,MAAMC,UAAW,KAAKuB,EAAGD,SAAS,IAAK,KAAKG,EAAGH,SAAS,IAC5E,KAAKL,EAAGK,SAAS,IAAK,KAAKP,EAAEO,SAAS,IAAK,KAAKV,EAAEU,SAAS,IAAK,EAAKvB,MAAMG,MAC3E,EAAKH,MAAMI,OACZ+B,KAAK,CAAEd,KAAMU,EAAS,GAAIK,MAAO,EAAKpC,MAAMK,UA9B5C,QAgCLgC,MAAM,qBAEN,EAAKC,MAAMC,QAAQC,KAAK,KAlCnB,kDAoCL,EAAK5B,SAAS,CAAEL,aAAc,KAAIL,UApC7B,yBAsCL,EAAKU,SAAS,CAAEN,SAAS,IAtCpB,6E,6GA2CD,IAAD,OACP,OACE,6BACE,kBAAC,IAAD,CAAMmC,GAAG,KAAT,QACA,iDACA,kBAAC,IAAD,CAAMjC,SAAUkC,KAAKlC,SAAUmC,QAASD,KAAK1C,MAAMO,cACjD,kBAAC,IAAKqC,MAAN,KACE,2CACA,kBAAC,IAAD,CACER,MAAOM,KAAK1C,MAAMC,SAClB4C,SAAU,SAAApC,GAAK,OAAI,EAAKG,SAAS,CAAEX,SAAUQ,EAAMqC,OAAOV,YAI9D,kBAAC,IAAKQ,MAAN,KACE,0CACA,kBAAC,IAAD,CACER,MAAOM,KAAK1C,MAAME,QAClB2C,SAAU,SAAApC,GAAK,OAAI,EAAKG,SAAS,CAAEV,QAASO,EAAMqC,OAAOV,YAI7D,kBAAC,IAAKQ,MAAN,KACE,yCACA,kBAAC,IAAD,CACEG,MAAM,UACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMG,MAClB0C,SAAU,SAAApC,GAAK,OAAI,EAAKG,SAAS,CAAET,MAAOM,EAAMqC,OAAOV,YAI3D,kBAAC,IAAKQ,MAAN,KACE,yCACA,kBAAC,IAAD,CACEG,MAAM,UACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMI,MAClByC,SAAU,SAAApC,GAAK,OAAI,EAAKG,SAAS,CAAER,MAAOK,EAAMqC,OAAOV,YAI3D,kBAAC,IAAKQ,MAAN,KACE,0CACA,kBAAC,IAAD,CACEG,MAAM,MACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMK,QAClBwC,SAAU,SAAApC,GAAK,OAAI,EAAKG,SAAS,CAAEP,QAASI,EAAMqC,OAAOV,YAI7D,kBAAC,IAAD,CAASO,OAAK,EAACM,OAAO,QAAQC,QAASR,KAAK1C,MAAMO,eAClD,kBAAC,IAAD,CAAQ4C,SAAO,EAAC7C,QAASoC,KAAK1C,MAAMM,SAApC,e,GA3GgB8C,aAoHXC,gBAAWtD,K,wPCtHpBF,EAASC,EAAQ,KACjBwD,EAAaxD,EAAQ,KAErByD,E,4MACJvD,MAAQ,CACNwD,QAAS,GACTC,OAAQ,GACRxD,SAAU,GACVD,MAAO,GACPgB,EAAG,GACHH,EAAG,GACHW,GAAI,GACJE,GAAI,GACJR,GAAI,GACJf,MAAO,GACPC,MAAO,GACPsD,MAAO,GACPC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,EAAG,GACHC,EAAG,GACH7D,QAAS,GACTG,QAAS,GACTC,SAAS,EACTC,aAAc,I,EAGhByD,kB,sBAAoB,sFAAAtD,EAAA,6DAElB,EAAKE,SAAS,CAAEN,SAAS,EAAMC,aAAc,KAF3B,SAKZiD,EAAU,EAAKlB,MAAM2B,MAAMC,OAAOV,QAClCW,EAAmBC,YAAaZ,GANpB,SAQI5B,IAAKC,IAAIwC,WAAWb,GARxB,cAQZnD,EARY,gBAUG8D,EAAiBlC,QAAQwB,SAASa,OAVrC,cAUZb,EAVY,iBAWKU,EAAiBlC,QAAQsC,UAAU,GAAGD,OAX3C,eAWZrE,EAXY,iBAYEkE,EAAiBlC,QAAQuC,SAASvE,GAAUqE,OAZ9C,eAYZtE,EAZY,iBAaFmE,EAAiBlC,QAAQjB,IAAIsD,OAb3B,eAaZtD,EAbY,iBAcFmD,EAAiBlC,QAAQpB,IAAIyD,OAd3B,eAcZzD,EAdY,iBAeDsD,EAAiBlC,QAAQT,KAAK8C,OAf7B,eAeZ9C,EAfY,iBAgBD2C,EAAiBlC,QAAQP,KAAK4C,OAhB7B,eAgBZ5C,EAhBY,iBAiBDyC,EAAiBlC,QAAQf,KAAKoD,OAjB7B,eAiBZpD,EAjBY,iBAkBEiD,EAAiBlC,QAAQ9B,QAAQmE,OAlBnC,eAkBZnE,EAlBY,iBAmBEgE,EAAiBlC,QAAQ7B,QAAQkE,OAnBnC,eAmBZlE,EAnBY,iBAoBE+D,EAAiBlC,QAAQyB,QAAQY,OApBnC,eAoBZZ,EApBY,iBAsBWS,EAAiBlC,QAAQwC,eAAexE,GAAUqE,OAtB7D,QAsBZG,EAtBY,OAwBZd,EAAKc,EAAed,GACpBC,EAAKa,EAAeb,GACpBC,EAAKY,EAAeZ,GACpBC,EAAIW,EAAeX,EACnBC,EAAIU,EAAeV,EACnB7D,EAAU,IAEVwE,EAAI,IAAIC,KAAK,IACfC,cAAclB,GAChBA,EAAQJ,EAAWoB,EAAG,oBAGlBX,IAEEc,EAAKhF,EAAOiB,IAAU+D,GAAG9D,OAAO,GAAI,IAEpC+D,EAAOjF,EAAOkE,EAAEhD,OAAO,GAAI,IAC3BgE,EAAOlF,EAAOiE,EAAE/C,OAAO,GAAI,IAC3BiE,EAAOnF,EAAOgB,EAAEE,OAAO,GAAI,IAC3BkE,EAAQpF,EAAO6B,EAAGX,OAAO,GAAI,IAC7BmE,EAAQrF,EAAOqB,EAAGH,OAAO,GAAI,IAE7BE,EAAI6D,EAAKK,SAASJ,EAAKpD,SAASkD,EAAGO,IAAIJ,KAErCK,EAAkBJ,EAAMK,OAAOJ,EAAMzD,OAAOR,EAAG+D,IACrD9E,EAAUkB,EAAOC,KAAKgE,EAAgB9D,SAAS,IAAK,QAGtD,EAAKX,SAAS,CACZ4C,QAASA,EACTC,OAAQA,EACRxD,SAAUA,EACVD,MAAOA,EACPgB,EAAGA,EACHH,EAAGA,EACHW,GAAIA,EACJE,GAAIA,EACJR,GAAIA,EACJf,MAAOA,EACPC,MAAOA,EACPsD,MAAOA,EACPC,GAAIA,EACJC,GAAIA,EACJC,GAAIA,EACJC,EAAGA,EACHC,EAAGA,EACH7D,QAASA,EACTG,QAASA,IAvEK,kDA0EhB,EAAKO,SAAS,CAAEL,aAAc,KAAIL,UA1ElB,yBA4EhB,EAAKU,SAAS,CAAEN,SAAS,IA5ET,6E,EAgFpBE,S,uCAAW,WAAMC,GAAN,SAAAC,EAAA,sDACTD,EAAME,iBAGN,EAAK2B,MAAMC,QAAQC,KAAK,KAJf,2C,6GAQT,OACE,6BACE,kBAAC,IAAD,CAAQ+C,UAAQ,EAACC,OAAQ9C,KAAK1C,MAAMM,SAClC,kBAAC,IAAD,CAAQiF,UAAQ,EAACrC,QAAQ,gBAE3B,kBAAC,IAAD,CAAMT,GAAG,KAAT,QACA,6CACA,kBAAC,IAAD,CAAMjC,SAAUkC,KAAKlC,SAAUmC,QAASD,KAAK1C,MAAMO,cACjD,kBAAC,IAAKqC,MAAN,KACE,4DACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMwD,WAItB,kBAAC,IAAKZ,MAAN,KACE,yCACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMyD,UAItB,kBAAC,IAAKb,MAAN,KACE,2CACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMC,YAItB,kBAAC,IAAK2C,MAAN,KACE,wCAEqB,aAAnBF,KAAK1C,MAAMA,MAEX,kBAAE,IAAF,CAAQ0F,GAAG,IAAIC,MAAM,OAAOC,YAAU,GAAtC,YAEqB,aAAnBlD,KAAK1C,MAAMA,MACT,kBAAC,IAAD,CAAO0F,GAAG,IAAIC,MAAM,SAASC,YAAU,GAAvC,YAEmB,YAAnBlD,KAAK1C,MAAMA,MACT,kBAAC,IAAD,CAAO0F,GAAG,IAAIE,YAAU,GAAxB,WAEA,kBAAC,IAAD,CAAOF,GAAG,IAAIE,YAAU,GAAxB,MAOV,kBAAC,IAAKhD,MAAN,KACE,yDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMa,KAItB,kBAAC,IAAK+B,MAAN,KACE,yDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMgB,KAItB,kBAAC,IAAK4B,MAAN,KACE,iDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMwB,MAItB,kBAAC,IAAKoB,MAAN,KACE,uDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM0B,MAItB,kBAAC,IAAKkB,MAAN,KACE,uEACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAMkB,MAItB,kBAAC,IAAK0B,MAAN,KACE,yCACA,kBAAC,IAAD,CACE6C,UAAQ,EACR1C,MAAM,UACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMG,SAItB,kBAAC,IAAKyC,MAAN,KACE,yCACA,kBAAC,IAAD,CACE6C,UAAQ,EACR1C,MAAM,UACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMI,SAItB,kBAAC,IAAKwC,MAAN,KACE,oDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM0D,SAItB,kBAAC,IAAKd,MAAN,KACE,iDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM2D,MAItB,kBAAC,IAAKf,MAAN,KACE,wDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM4D,MAItB,kBAAC,IAAKhB,MAAN,KACE,uEACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM6D,MAItB,kBAAC,IAAKjB,MAAN,KACE,uDACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM8D,KAItB,kBAAC,IAAKlB,MAAN,KACE,iFACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAM+D,KAItB,kBAAC,IAAKnB,MAAN,KACE,0CACA,kBAAC,IAAD,CACE6C,UAAQ,EACRrD,MAAOM,KAAK1C,MAAME,WAItB,kBAAC,IAAK0C,MAAN,KACE,0CACA,kBAAC,IAAD,CACEG,MAAM,MACNC,cAAc,QACdZ,MAAOM,KAAK1C,MAAMK,WAItB,kBAAC,IAAD,CAASsC,OAAK,EAACM,OAAO,QAAQC,QAASR,KAAK1C,MAAMO,eAClD,kBAAC,IAAD,CAAQ4C,SAAO,EAAC7C,QAASoC,KAAK1C,MAAMM,SAApC,e,GAnSiB8C,aA4SZC,gBAAWE,K,mGCpTtB3B,E,2CAEAiE,OAAOjE,OACTA,EAAO,IAAIkE,IAAKD,OAAOjE,KAAKmE,kBAQ9BF,OAAOG,iBAAiB,OAAxB,sBAAgC,sBAAAtF,EAAA,0DAE1BmF,OAAOI,SAFmB,wBAG5BJ,OAAOjE,KAAO,IAAIkE,IAAKD,OAAOI,UAHF,kBAMpBJ,OAAOI,SAASC,SANI,uDAQ1B7D,MAAM,iCARoB,gCAYrBwD,OAAOjE,KACdiE,OAAOjE,KAAO,IAAIkE,IAAKlE,EAAKmE,iBAI5B1D,MAAM,uEAjBsB,0DAqBjBT,O,gCCzBA,KACbf,EAVQ,qIAWRG,EAVQ,qIAWRmF,EAVQ,qIAWRC,GAVS,qIAWTlF,GAVS,qIAWTD,EAVQ,qIAWR4D,GAVS,mIAWThB,GAVS,uI,8YCPX,SAASwC,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,yrllCCJV,aACX,OACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAACC,MAAO,CAAEC,UAAW,SAChC,kBAACH,EAAA,EAAKI,KAAN,CAAWzB,GAAI0B,IAAM3E,GAAG,KAAxB,4DAGA,kBAACsE,EAAA,EAAKA,KAAN,CAAWM,SAAS,SAChB,kBAACN,EAAA,EAAKI,KAAN,CAAWzB,GAAI0B,IAAM3E,GAAG,KAAxB,cAGA,kBAACsE,EAAA,EAAKI,KAAN,CAAWzB,GAAI0B,IAAM3E,GAAG,mBAAxB,Q,+HCPV5C,EAASC,EAAQ,KACjBwD,EAAaxD,EAAQ,KAqLZwH,E,4MAlLbtH,MAAQ,CACNC,SAAU,GACVyD,MAAO,GACP1D,MAAO,GACPM,SAAS,EACTC,aAAc,I,EAGhByD,kB,sBAAoB,oCAAAtD,EAAA,6DACdyD,EAAmBC,YAAa,EAAK9B,MAAMiF,UAD7B,SAEGpD,EAAiBlC,QAAQsC,UAAU,GAAGD,OAFzC,cAEdrE,EAFc,gBAGAkE,EAAiBlC,QAAQyB,QAAQY,OAHjC,cAGdZ,EAHc,gBAIAS,EAAiBlC,QAAQuC,SAASvE,GAAUqE,OAJ5C,OAIdtE,EAJc,QAMd0E,EAAI,IAAIC,KAAK,IACfC,cAAclB,GAChBA,EAAQJ,EAAWoB,EAAG,oBAEtB,EAAK9D,SAAS,CACZX,SAAUA,EACVyD,MAAOA,EACP1D,MAAOA,IAbS,4C,EAiBpBwH,O,sBAAS,sBAAA9G,EAAA,0F,EAST+G,S,uCAAW,WAAOC,GAAP,qCAAAhH,EAAA,6DAIT,EAAKE,SAAS,CAAEN,SAAS,EAAMC,aAAc,KAJpC,SAOH4D,EAAmBC,YAAasD,GAP7B,SASgB9F,IAAKC,IAAIC,cATzB,cASDC,EATC,OAaHoE,EAAItG,EAAOiB,IAAUqF,EAAEpF,OAAO,GAAI,IAClC8D,EAAKhF,EAAOiB,IAAU+D,GAAG9D,OAAO,GAAI,IACpC8C,EAAKhE,EAAOiB,IAAU+C,GAAG9C,OAAO,GAAI,IAfjC,KAiBClB,EAjBD,UAiBesE,EAAiBlC,QAAQpB,IAAIyD,OAjB5C,2BAiBoDvD,OAAO,GAA9DF,GAjBG,aAiB+D,IAjB/D,KAkBChB,EAlBD,UAkBesE,EAAiBlC,QAAQjB,IAAIsD,OAlB5C,2BAkBoDvD,OAAO,GAA9DC,GAlBG,aAkB+D,IAlB/D,KAmBEnB,EAnBF,UAmBgBsE,EAAiBlC,QAAQf,KAAKoD,OAnB9C,2BAmBsDvD,OAAO,GAAhEG,GAnBG,aAmBiE,IAIxE4C,EAAIjE,EAAO8H,YAAY,EAAGxB,EAAEyB,MAAM,IAGlCC,EAAIhI,EAAO8H,YAAY,EAAGxB,EAAEyB,MAAM,IAGlCjE,EAAK3C,EAAES,OAAOoG,EAAGhH,GAEjB+C,EAAKiB,EAAGlD,SAAST,EAAGO,OAAOoG,EAAGhH,IA/BvB,UAiCDsD,EAAiBlC,QACpB6F,OAAO,KAAKnE,EAAGpC,SAAS,IAAK,KAAKqC,EAAGrC,SAAS,IAAK,KAAKsC,EAAGtC,SAAS,IAAK,KAAKuC,EAAEvC,SAAS,KACzFY,KAAK,CAAEd,KAAMU,EAAS,KAnClB,QAsCPM,MAAM,oDAtCC,kDAwCP,EAAKzB,SAAS,CAAEL,aAAc,KAAIL,UAxC3B,yBA0CL,EAAKU,SAAS,CAAEN,SAAS,IA1CpB,6E,wDA8CXyH,S,uCAAW,WAAOL,GAAP,6BAAAhH,EAAA,6DAIT,EAAKE,SAAS,CAAEN,SAAS,EAAMC,aAAc,KAJpC,SAOH4D,EAAmBC,YAAasD,GAP7B,SASgB9F,IAAKC,IAAIC,cATzB,cASDC,EATC,OAYHd,EAAIpB,EAAOiB,IAAUG,EAAEF,OAAO,GAAI,IAGlC8D,EAAKhF,EAAOiB,IAAU+D,GAAG9D,OAAO,GAAI,IAfjC,UAiBcoD,EAAiBlC,QAAQsC,UAAU,GAAGD,OAjBpD,eAiBHrE,EAjBG,YAkBCJ,EAlBD,UAkBesE,EAAiBlC,QAAQpB,IAAIyD,OAlB5C,2BAkBoDvD,OAAO,GAA9DF,GAlBG,aAkB+D,IAlB/D,KAmBChB,EAnBD,UAmBgBsE,EAAiBlC,QAAQwC,eAAexE,GAAUqE,OAnBlE,2BAmB0ER,EAAG/C,OAAO,GAAvF+C,GAnBG,aAmBwF,IAK/FC,EAAK9C,EAAE+G,IAAIlE,EAAEnC,SAASkD,EAAGO,IAAIvE,KAxBtB,UA0BDsD,EAAiBlC,QACpBgG,OAAOhI,EAAU,KAAK8D,EAAExC,SAAS,KACjCY,KAAK,CAAEd,KAAMU,EAAS,KA5BlB,QA+BPM,MAAM,oDA/BC,kDAiCP,EAAKzB,SAAS,CAAEL,aAAc,KAAIL,UAjC3B,yBAmCL,EAAKU,SAAS,CAAEN,SAAS,IAnCpB,6E,6GAuCD,IAAD,OACL,OACI,kBAAC4H,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAME,KAAP,KAAa1F,KAAKJ,MAAMwE,GAAG,GAC3B,kBAACoB,EAAA,EAAME,KAAP,KAAa1F,KAAKJ,MAAMiF,UACxB,kBAACW,EAAA,EAAME,KAAP,KAAa1F,KAAK1C,MAAMC,UACxB,kBAACiI,EAAA,EAAME,KAAP,KAAa1F,KAAK1C,MAAM0D,OACxB,kBAACwE,EAAA,EAAME,KAAP,KAEsB,aAAnB1F,KAAK1C,MAAMA,MAER,kBAACqI,EAAA,EAAD,CAAO3C,GAAG,IAAIC,MAAM,OAAOC,YAAU,GAArC,YAEmB,aAAnBlD,KAAK1C,MAAMA,MACT,kBAACqI,EAAA,EAAD,CAAO3C,GAAG,IAAIC,MAAM,SAASC,YAAU,GAAvC,YAEmB,YAAnBlD,KAAK1C,MAAMA,MACT,kBAACqI,EAAA,EAAD,CAAO3C,GAAG,IAAIE,YAAU,GAAxB,WAEA,kBAACyC,EAAA,EAAD,CAAO3C,GAAG,IAAIE,YAAU,GAAxB,MAMV,kBAACsC,EAAA,EAAME,KAAP,KAEM1F,KAAKJ,MAAMgG,KACT,kBAACC,EAAA,EAAD,CAAQC,SAAS,WAAW7C,MAAM,OAAO8C,QAAS,kBAAM,EAAKV,SAAS,EAAKzF,MAAMiF,WAAWmB,SAA6B,aAAnBhG,KAAK1C,MAAMA,MAAoBM,QAASoC,KAAK1C,MAAMM,SACvJ,kBAACiI,EAAA,EAAOI,QAAR,CAAgBC,QAAM,GAAtB,UACA,kBAACL,EAAA,EAAOI,QAAR,CAAgBE,SAAO,GACrB,kBAACC,EAAA,EAAD,CAAMC,KAAK,WAIf,kBAACR,EAAA,EAAD,CAAQC,SAAS,WAAW7C,MAAM,OAAO8C,QAAS,kBAAM,EAAKhB,SAAS,EAAKnF,MAAMiF,WAAWmB,SAA6B,YAAnBhG,KAAK1C,MAAMA,MAAmBM,QAASoC,KAAK1C,MAAMM,SACtJ,kBAACiI,EAAA,EAAOI,QAAR,CAAgBC,QAAM,GAAtB,UACA,kBAACL,EAAA,EAAOI,QAAR,CAAgBE,SAAO,GACrB,kBAACC,EAAA,EAAD,CAAMC,KAAK,YAKnB,kBAAC,IAAD,CAAMtG,GAAI,eAAeC,KAAKJ,MAAMiF,UAClC,kBAACgB,EAAA,EAAD,CAAQC,SAAS,WAAW7C,MAAM,OAAO8C,QAAS/F,KAAK8E,QACrD,kBAACe,EAAA,EAAOI,QAAR,CAAgBC,QAAM,GAAtB,QACA,kBAACL,EAAA,EAAOI,QAAR,CAAgBE,SAAO,GACrB,kBAACC,EAAA,EAAD,CAAMC,KAAK,WAIjB,kBAACC,EAAA,EAAD,CAASrG,OAAK,EAACM,OAAO,QAAQC,QAASR,KAAK1C,MAAMO,aAAcqI,QAASlG,KAAK1C,MAAMO,qB,GA3K5E6C,aC6GX6F,E,4MA/GXjJ,MAAQ,CACJkJ,aAAa,EACb5I,SAAS,EACTC,aAAc,I,EAGlByD,kB,sBAAoB,oCAAAtD,EAAA,+EAEWkB,IAAKC,IAAIC,cAFpB,cAENC,EAFM,gBAGwBC,IAAQC,QAAQkH,yBAAyBpH,EAAS,IAAIuC,OAH9E,cAGN8E,EAHM,gBAI0BpH,IAAQC,QAAQoH,2BAA2BtH,EAAS,IAAIuC,OAJlF,cAINgF,EAJM,iBAMmBC,QAAQC,IACnCC,MAAMC,SAASN,IACZO,OACAC,KAAI,SAACrC,EAAUsC,GACd,OAAO7H,IAAQC,QAAQ6H,iBAAiB/H,EAAS,GAAI8H,GAAOvF,WAVxD,eAMNwF,EANM,iBAcuBP,QAAQC,IACvCC,MAAMC,SAASJ,IACZK,OACAC,KAAI,SAACrC,EAAUsC,GACd,OAAO7H,IAAQC,QAAQ8H,mBAAmBhI,EAAS,GAAI8H,GAAOvF,WAlB1D,QAcJyF,EAdI,OAsBZ,EAAKnJ,SAAS,CACVkJ,iBAAkBA,EAClBC,mBAAoBA,IAxBZ,yBA2BZ,EAAKnJ,SAAS,CAAEsI,aAAa,IA3BjB,2E,iEA+BDZ,GAOf,OALIA,EACa5F,KAAK1C,MAAM8J,iBAEXpH,KAAK1C,MAAM+J,oBAEVH,KAAI,SAACrC,EAAUsC,GAC7B,OACI,kBAAC,EAAD,CACIG,IAAKH,EACL/C,GAAI+C,EACJtC,SAAUA,EACVe,KAAMA,S,+BAQlB,OAAI5F,KAAK1C,MAAMkJ,YACX,6BACI,kBAACe,EAAA,EAAD,CAAShD,MAAO,CAAEiD,OAAQ,SACtB,kBAACC,EAAA,EAAD,CAAQ3E,QAAM,EAACD,UAAQ,GACnB,kBAAC6E,EAAA,EAAD,CAAQ7E,UAAQ,EAACrC,QAAQ,kBAQrC,6BACI,4BAAI,kBAAC4F,EAAA,EAAD,CAAMC,KAAK,oBAAoBsB,UAAQ,IAA3C,2BACA,kBAACnC,EAAA,EAAD,CAAOoC,OAAK,GACR,kBAACpC,EAAA,EAAMqC,OAAP,KACI,kBAACrC,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMsC,WAAP,UACA,kBAACtC,EAAA,EAAMsC,WAAP,gBACA,kBAACtC,EAAA,EAAMsC,WAAP,eACA,kBAACtC,EAAA,EAAMsC,WAAP,kBACA,kBAACtC,EAAA,EAAMsC,WAAP,cACA,kBAACtC,EAAA,EAAMsC,WAAP,iBAGR,kBAACtC,EAAA,EAAMuC,KAAP,KAAa/H,KAAKgI,oBAAmB,KAEzC,4BAAI,kBAAC5B,EAAA,EAAD,CAAMC,KAAK,qBAAqBsB,UAAQ,IAA5C,uBACA,kBAACnC,EAAA,EAAD,CAAOoC,OAAK,GACR,kBAACpC,EAAA,EAAMqC,OAAP,KACI,kBAACrC,EAAA,EAAMC,IAAP,KACI,kBAACD,EAAA,EAAMsC,WAAP,UACA,kBAACtC,EAAA,EAAMsC,WAAP,gBACA,kBAACtC,EAAA,EAAMsC,WAAP,iBACA,kBAACtC,EAAA,EAAMsC,WAAP,kBACA,kBAACtC,EAAA,EAAMsC,WAAP,cACA,kBAACtC,EAAA,EAAMsC,WAAP,iBAGR,kBAACtC,EAAA,EAAMuC,KAAP,KAAa/H,KAAKgI,oBAAmB,KAEzC,kBAAC,IAAD,CAAMjI,GAAG,mBACL,kBAAC8F,EAAA,EAAD,CACIrF,QAAU,oBACVyH,KAAO,aACPxH,SAAW,U,GAxGhBC,a,kBC0BJwH,G,8KAlBP,OACI,kBAACC,EAAA,EAAD,KACI,kBAACN,EAAD,MACA,8BACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IACjC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,kBAAkBC,UAAWjL,MAC/C,kBAAC,IAAD,CAAO+K,OAAK,EAACC,KAAK,uBAAuBC,UAAWzH,a,GAT1DH,cCHZ6H,EAAcC,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASnH,MACvB,2DAsCN,SAASoH,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7L,QACfuL,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAxJ,GACLsJ,QAAQtJ,MAAM,4CAA6CA,MCzEjEyJ,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAECC,SAASC,eAAe,SDUhB,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,yCAAwB5G,OAAOsF,UAC3CuB,SAAW7G,OAAOsF,SAASuB,OAIvC,OAGF7G,OAAOG,iBAAiB,QAAQ,WAC9B,IAAMsF,EAAK,UAAMmB,yCAAN,sBAEPxB,IAiDV,SAAiCK,GAE/BqB,MAAMrB,GACHI,MAAK,SAAAkB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMvB,MAAK,SAAAC,GACjCA,EAAauB,aAAaxB,MAAK,WAC7B7F,OAAOsF,SAASgC,eAKpB9B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAkB,CAAwB9B,GAIxBC,UAAUC,cAAcyB,MAAMvB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCrCxB+B,I,gCCXA,YAKMC,EAAkBxN,EAAQ,KAE1ByN,EAAW,IAAI3L,IAAKC,IAAI2L,SAC1BC,KAAKC,MAAMJ,EAAgBK,WAC3BL,EAAgB9J,SAGL+J,O,gCCZf,YAEMK,EAAW9N,EAAQ,KAEV,aAAC0D,GACZ,OAAO,IAAI5B,IAAKC,IAAI2L,SAChBC,KAAKC,MAAME,EAASD,WACpBnK,M","file":"static/js/main.38e8caeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Form, Button, Message, Input } from 'semantic-ui-react';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\nimport variables from '../ethereum/variables';\n\nconst bigInt = require(\"big-integer\");\n\nclass DeliveryNew extends Component {\n  state = {\n    receiver: '',\n    message: '',\n    term1: '',\n    term2: '',\n    deposit: '',\n    loading: false,\n    errorMessage: ''\n  };\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n        let c1, c2;\n        \n        // p, g of ElGamal algorithm\n        let p = bigInt(variables.p.substr(2), 16)\n        let g = bigInt(variables.g.substr(2), 16)\n        // Random number r\n        let r = bigInt(variables.r.substr(2), 16)\n        // ya public key of A\n        let ya = bigInt(variables.ya.substr(2), 16)\n        \n        let messageSentBuffer = Buffer.from(this.state.message, 'utf8');\n        let messageSent = bigInt(messageSentBuffer.toString('hex'), 16);\n\n        // Generation of C1 = g^r mod p\n        c1 = g.modPow(r, p);\n\n        // Generation of C2 = m·ya^r mod p\n        c2 = messageSent.multiply(ya.modPow(r, p));\n        \n        const accounts = await web3.eth.getAccounts();\n        await factory.methods\n            .createDelivery([this.state.receiver], \"0x\"+c1.toString(16), \"0x\"+c2.toString(16),\n              \"0x\"+ya.toString(16), \"0x\"+g.toString(16), \"0x\"+p.toString(16), this.state.term1, \n              this.state.term2)\n            .send({ from: accounts[0], value: this.state.deposit });\n\n        alert('Delivery created!');\n        // Refresh, using withRouter\n        this.props.history.push('/');\n    } catch (err) {\n        this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n\n  };\n\n  render() {\n    return (\n      <div>\n        <Link to='/'>Back</Link>\n        <h3>Send New Delivery</h3>\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Receiver</label>\n            <Input\n              value={this.state.receiver}\n              onChange={event => this.setState({ receiver: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Message</label>\n            <Input\n              value={this.state.message}\n              onChange={event => this.setState({ message: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Term 1</label>\n            <Input\n              label=\"seconds\"\n              labelPosition=\"right\"\n              value={this.state.term1}\n              onChange={event => this.setState({ term1: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Term 2</label>\n            <Input\n              label=\"seconds\"\n              labelPosition=\"right\"\n              value={this.state.term2}\n              onChange={event => this.setState({ term2: event.target.value })}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Deposit</label>\n            <Input\n              label=\"wei\"\n              labelPosition=\"right\"\n              value={this.state.deposit}\n              onChange={event => this.setState({ deposit: event.target.value })}\n            />\n          </Form.Field>\n\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\n          <Button primary loading={this.state.loading}>\n            Send!\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(DeliveryNew);\n","import React, { Component } from 'react';\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Form, Button, Message, Input, Dimmer, Loader, Label } from 'semantic-ui-react';\nimport notification from '../ethereum/notification';\nimport web3 from '../ethereum/web3';\nimport variables from '../ethereum/variables';\n\nconst bigInt = require(\"big-integer\");\nconst dateFormat = require('dateformat');\n\nclass DeliveryShow extends Component {\n  state = {\n    address: '',\n    sender: '',\n    receiver: '',\n    state: '',\n    g: '',\n    p: '',\n    c1: '',\n    c2: '',\n    ya: '',\n    term1: '',\n    term2: '',\n    start: '',\n    z1: '',\n    z2: '',\n    yb: '',\n    c: '',\n    w: '',\n    message: '',\n    deposit: '',\n    loading: false,\n    errorMessage: ''\n  };\n\n  componentDidMount = async () => {\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n      let address = this.props.match.params.address;\n      let deliveryContract = notification(address);\n\n      let deposit = await web3.eth.getBalance(address)\n\n      let sender = await deliveryContract.methods.sender().call();\n      let receiver = await deliveryContract.methods.receivers(0).call();\n      let state = await deliveryContract.methods.getState(receiver).call();\n      let g = await deliveryContract.methods.g().call();\n      let p = await deliveryContract.methods.p().call();\n      let c1 = await deliveryContract.methods.c1().call();\n      let c2 = await deliveryContract.methods.c2().call();\n      let ya = await deliveryContract.methods.ya().call();\n      let term1 = await deliveryContract.methods.term1().call();\n      let term2 = await deliveryContract.methods.term2().call();\n      let start = await deliveryContract.methods.start().call();\n\n      let receiversState = await deliveryContract.methods.receiversState(receiver).call();\n\n      let z1 = receiversState.z1;\n      let z2 = receiversState.z2;\n      let yb = receiversState.yb;\n      let c = receiversState.c;\n      let w = receiversState.w;\n      let message = '';\n\n      let d = new Date(0);\n      d.setUTCSeconds(start);\n      start = dateFormat(d, \"dd/mm/yyyy HH:MM\");\n\n      // Calcular MESSAGE\n      if (w) {\n        // TODO: El sender no té Xb\n        let xb = bigInt(variables.xb.substr(2), 16);\n\n        let wBig = bigInt(w.substr(2), 16);\n        let cBig = bigInt(c.substr(2), 16);\n        let pBig = bigInt(p.substr(2), 16);\n        let c2Big = bigInt(c2.substr(2), 16);\n        let yaBig = bigInt(ya.substr(2), 16);\n        \n        let r = wBig.subtract(cBig.multiply(xb.mod(pBig)));  // r = w-c*xb mod q\n\n        const messageReceived = c2Big.divide(yaBig.modPow(r, pBig));\n        message = Buffer.from(messageReceived.toString(16), 'hex');\n      }\n\n      this.setState({ \n        address: address,\n        sender: sender,\n        receiver: receiver,\n        state: state,\n        g: g,\n        p: p,\n        c1: c1,\n        c2: c2,\n        ya: ya,\n        term1: term1,\n        term2: term2,\n        start: start,\n        z1: z1,\n        z2: z2,\n        yb: yb,\n        c: c,\n        w: w,\n        message: message,\n        deposit: deposit\n      });\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n      this.setState({ loading: false });\n    }\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    // Refresh, using withRouter\n    this.props.history.push('/');\n  };\n\n  render() {\n    return (\n      <div>\n        <Dimmer inverted active={this.state.loading}>\n          <Loader inverted content='Loading...'></Loader>\n        </Dimmer>\n        <Link to='/'>Back</Link>\n        <h3>Show Delivery</h3>\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Field>\n            <label>Address of Smart Contract</label>\n            <Input\n              readOnly\n              value={this.state.address}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Sender</label>\n            <Input\n              readOnly\n              value={this.state.sender}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Receiver</label>\n            <Input\n              readOnly\n              value={this.state.receiver}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>State</label>\n            {\n              this.state.state==='finished'? \n              (\n              < Label as='a' color='teal' horizontal>Finished</Label>\n              ) : (\n                this.state.state==='accepted'? (\n                  <Label as='a' color='yellow' horizontal>Accepted</Label>\n                ) : (\n                  this.state.state==='created'? (\n                    <Label as='a' horizontal>Created</Label>\n                  ) : (\n                    <Label as='a' horizontal>-</Label>\n                  )\n                )\n              )\n            }\n          </Form.Field>\n\n          <Form.Field>\n            <label>p of ElGamal algorithm</label>\n            <Input\n              readOnly\n              value={this.state.p}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>g of ElGamal algorithm</label>\n            <Input\n              readOnly\n              value={this.state.g}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>c1 = g^r mod p</label>\n            <Input\n              readOnly\n              value={this.state.c1}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>c2 = m·ya^r mod p</label>\n            <Input\n              readOnly\n              value={this.state.c2}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>ya, public key of A, ya = g^xa mod p</label>\n            <Input\n              readOnly\n              value={this.state.ya}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Term 1</label>\n            <Input\n              readOnly\n              label=\"seconds\"\n              labelPosition=\"right\"\n              value={this.state.term1}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Term 2</label>\n            <Input\n              readOnly\n              label=\"seconds\"\n              labelPosition=\"right\"\n              value={this.state.term2}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Start (Timestamp)</label>\n            <Input\n              readOnly\n              value={this.state.start}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>z1 = g^s mod p</label>\n            <Input\n              readOnly\n              value={this.state.z1}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>z2 = xb·ya^s mod p</label>\n            <Input\n              readOnly\n              value={this.state.z2}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>yb, public key of B, yb = g^xb mod p</label>\n            <Input\n              readOnly\n              value={this.state.yb}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>c (challenge number)</label>\n            <Input\n              readOnly\n              value={this.state.c}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>w = r.add(c.mod(p).multiply(xb.mod(p)).mod(p))</label>\n            <Input\n              readOnly\n              value={this.state.w}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Message</label>\n            <Input\n              readOnly\n              value={this.state.message}\n            />\n          </Form.Field>\n\n          <Form.Field>\n            <label>Deposit</label>\n            <Input\n              label=\"wei\"\n              labelPosition=\"right\"\n              value={this.state.deposit}\n            />\n          </Form.Field>\n\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\n          <Button primary loading={this.state.loading}>\n            Close\n          </Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(DeliveryShow);\n","import Web3 from 'web3';\n\nlet web3\n\nif (window.web3) {\n  web3 = new Web3(window.web3.currentProvider);\n}\n\n/*\nhttps://medium.com/@parag.chirde/building-a-dapp-on-ethereum-with-vuejs-and-solidity-d01a24b54c1f\n\nhttps://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nwindow.addEventListener(\"load\", async () => {\n  // Modern dapp browsers...\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    try {\n      // Request account access if needed\n      await window.ethereum.enable();\n    } catch (error) {\n      alert('User denied account access...');\n    }\n  }\n  // Legacy dapp browsers...\n  else if (window.web3) {\n    window.web3 = new Web3(web3.currentProvider);\n  }\n  // Non-dapp browsers...\n  else {\n    alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n  }\n});\n\nexport default web3;","const p = '0xfabb9ab2f0b94831ce41fef46a3e1e0af4f0c30be6a20c6294cf0ed0243d9990b69794b02c7a04c1c34fa4ac36278a9d12805d1e136290d7c9661cc773eca0ef';\nconst g = '0x741b99e8d3e6197266cdb8573abbaf241f4d477abeca34889883534d2f6eeb59ffdd3dde12d31be92a9b873df01ed2bf86fc8b5d87ced1b9691cb7f1e9214c8d';\nconst q = '0x7d5dcd59785ca418e720ff7a351f0f057a786185f35106314a678768121eccc85b4bca58163d0260e1a7d2561b13c54e89402e8f09b1486be4b30e63b9f65077';\nconst xa = '0x171896f638c47b6cb040b7108094a63ee0d427f0918c1f14106589c66e4199e8e0680cd199b676297013a83cdac90f48e00e6dfd1db2e14d0752ab9f65c34099';\nconst ya = '0xf700332eaec7576cd02ef93d10c86428ced3f00bd67c69ed997dd4311f7b5dded395c8c4c14340b18099febeaf693fbe1926d79ed8613edb495032f0c4531e7c';\nconst r = '0x4677e52e4deb555e3b2356d8a980055283cf94498d02473b28aa56357bcf29cb4e15e419bd8fc337714464dee817e2608dc39981db3ad0f527f2559bdb541827';\nconst xb = '0xdafb1fb2f431fdee71309df79b8a15578fe5e6403f82120aa8ba89ed3a093e80ca707ba96ff8499b11002833961aaa7d47152dc4f8c6b4881c2ffffa8563f9';\nconst yb = '0x3235c538fd584e4d9089080ccdf7e75a7747bf9e5608965c83877672f9603804649224aff820b662ab6f42331a78138499203e12afeddfdf98f21c3afe099bde';\n\nexport default {\n  p  : p ,\n  g  : g ,\n  q  : q ,\n  xa : xa,\n  ya : ya,\n  r  : r ,\n  xb : xb,\n  yb : yb\n}\n\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 634;","import React from 'react';\nimport { Menu } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default () => {\n    return (\n        <Menu stackable style={{ marginTop: '10px' }}>\n            <Menu.Item as={Link} to='/'>\n                Confidential Multiparty Registered eDelivery without TTP\n            </Menu.Item>\n            <Menu.Menu position=\"right\">\n                <Menu.Item as={Link} to='/'>\n                    Deliveries\n                </Menu.Item>\n                <Menu.Item as={Link} to='/deliveries/new'>\n                    +\n                </Menu.Item>\n            </Menu.Menu>\n        </Menu>\n    );\n};","import React, { Component } from 'react';\nimport { Link } from \"react-router-dom\";\nimport { Table, Button, Icon, Message, Label } from 'semantic-ui-react';\nimport web3 from '../ethereum/web3';\nimport notification from '../ethereum/notification';\nimport variables from '../ethereum/variables';\n\nconst bigInt = require(\"big-integer\");\nconst dateFormat = require('dateformat');\n\nclass DeliveryRow extends Component {\n  state = {\n    receiver: '',\n    start: '',\n    state: '',\n    loading: false,\n    errorMessage: '',\n  };\n\n  componentDidMount = async () => {\n    let deliveryContract = notification(this.props.delivery);\n    let receiver = await deliveryContract.methods.receivers(0).call();\n    let start = await deliveryContract.methods.start().call();\n    let state = await deliveryContract.methods.getState(receiver).call();\n\n    let d = new Date(0);\n    d.setUTCSeconds(start);\n    start = dateFormat(d, \"dd/mm/yyyy HH:MM\");\n\n    this.setState({ \n      receiver: receiver,\n      start: start,\n      state: state\n    });\n  }\n\n  onView = async () => {\n    /*const campaign = Campaign(this.props.address);\n\n    const accounts = await web3.eth.getAccounts();\n    await campaign.methods.approveRequest(this.props.id).send({\n      from: accounts[0]\n    });*/\n  };\n\n  onAccept = async (contractAddress) => {\n\n    let c, s, z1, z2;\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n      let deliveryContract = notification(contractAddress);\n\n      const accounts = await web3.eth.getAccounts();\n\n      // q of ElGamal algorithm\n      // TODO: Com ho podem saber?\n      let q = bigInt(variables.q.substr(2), 16);\n      let xb = bigInt(variables.xb.substr(2), 16);\n      let yb = bigInt(variables.yb.substr(2), 16);\n\n      let p = bigInt((await deliveryContract.methods.p().call()).substr(2), 16);\n      let g = bigInt((await deliveryContract.methods.g().call()).substr(2), 16);\n      let ya = bigInt((await deliveryContract.methods.ya().call()).substr(2), 16);\n\n      // VARIABLES FOR ACCEPT()\n      // Generation of challenge number c\n      c = bigInt.randBetween(2, q.minus(1));      // Pot ser mes curt, meitat de bits\n      \n      // Generation of random number s\n      s = bigInt.randBetween(2, q.minus(1));\n\n      // Generation of z1 = g^s mod p\n      z1 = g.modPow(s, p);\n      // Generation of z2 = xb·ya^s mod p\n      z2 = xb.multiply(ya.modPow(s, p));\n      \n      await deliveryContract.methods\n        .accept(\"0x\"+z1.toString(16), \"0x\"+z2.toString(16), \"0x\"+yb.toString(16), \"0x\"+c.toString(16))\n        .send({ from: accounts[0] });\n\n      // Refresh\n      alert('Accepted delivery! Please, refresh your browser.');\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n  };\n\n  onFinish = async (contractAddress) => {\n\n    let w;\n\n    this.setState({ loading: true, errorMessage: '' });\n\n    try {\n      let deliveryContract = notification(contractAddress);\n\n      const accounts = await web3.eth.getAccounts();\n\n      // Random number r\n      let r = bigInt(variables.r.substr(2), 16)\n      // xb private key of B\n      // TODO: Com ho podem saber?\n      let xb = bigInt(variables.xb.substr(2), 16)\n\n      let receiver = await deliveryContract.methods.receivers(0).call();\n      let p = bigInt((await deliveryContract.methods.p().call()).substr(2), 16);\n      let c = bigInt(((await deliveryContract.methods.receiversState(receiver).call()).c).substr(2), 16);\n\n      // VARIABLES FOR FINISH()\n      //const w = r.add(c.mod(p).multiply(xb.mod(p)).mod(p));\n      \n      w =  r.add(c.multiply(xb.mod(p)));\n      \n      await deliveryContract.methods\n        .finish(receiver, \"0x\"+w.toString(16))\n        .send({ from: accounts[0] });\n\n      // Refresh\n      alert('Finished delivery! Please, refresh your browser.');\n    } catch (err) {\n      this.setState({ errorMessage: err.message });\n    } finally {\n        this.setState({ loading: false });\n    }\n  };\n\n  render() {\n      return (\n          <Table.Row>\n              <Table.Cell>{this.props.id+1}</Table.Cell>\n              <Table.Cell>{this.props.delivery}</Table.Cell>\n              <Table.Cell>{this.state.receiver}</Table.Cell>\n              <Table.Cell>{this.state.start}</Table.Cell>\n              <Table.Cell>\n                {\n                 this.state.state==='finished'? \n                   (\n                    <Label as='a' color='teal' horizontal>Finished</Label>\n                   ) : (\n                    this.state.state==='accepted'? (\n                      <Label as='a' color='yellow' horizontal>Accepted</Label>\n                    ) : (\n                      this.state.state==='created'? (\n                        <Label as='a' horizontal>Created</Label>\n                      ) : (\n                        <Label as='a' horizontal>-</Label>\n                      )\n                    )\n                   )\n                 }\n              </Table.Cell>\n              <Table.Cell>\n                  {\n                    this.props.sent ? (\n                      <Button animated='vertical' color='blue' onClick={() => this.onFinish(this.props.delivery)} disabled={this.state.state!=='accepted'} loading={this.state.loading}>\n                        <Button.Content hidden>Finish</Button.Content>\n                        <Button.Content visible>\n                          <Icon name='send' />\n                        </Button.Content>\n                      </Button>\n                    ) : (\n                      <Button animated='vertical' color='blue' onClick={() => this.onAccept(this.props.delivery)} disabled={this.state.state!=='created'} loading={this.state.loading}>\n                        <Button.Content hidden>Accept</Button.Content>\n                        <Button.Content visible>\n                          <Icon name='check' />\n                        </Button.Content>\n                    </Button>\n                    )\n                  }\n                  <Link to={\"/deliveries/\"+this.props.delivery}>\n                    <Button animated='vertical' color='blue' onClick={this.onView}>\n                      <Button.Content hidden>View</Button.Content>\n                      <Button.Content visible>\n                        <Icon name='eye' />\n                      </Button.Content>\n                    </Button>\n                  </Link>\n                  <Message error header=\"ERROR\" content={this.state.errorMessage} hidden={!this.state.errorMessage} />\n              </Table.Cell>\n          </Table.Row>\n          \n      );\n    }\n}\n\nexport default DeliveryRow;\n","import React, { Component } from 'react';\nimport { Icon, Button, Dimmer, Loader, Segment, Table } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport factory from '../ethereum/factory';\nimport web3 from '../ethereum/web3';\nimport DeliveryRow from '../components/DeliveryRow';\n\nclass Home extends Component {\n    state = {\n        loadingPage: true,\n        loading: false,\n        errorMessage: ''\n    };\n\n    componentDidMount = async () => {\n        try {\n            const accounts = await web3.eth.getAccounts();\n            const senderDeliveriesCount = await factory.methods.getSenderDeliveriesCount(accounts[0]).call();\n            const receiverDeliveriesCount = await factory.methods.getReceiverDeliveriesCount(accounts[0]).call();\n\n            const senderDeliveries = await Promise.all(\n                Array(parseInt(senderDeliveriesCount))\n                  .fill()\n                  .map((delivery, index) => {\n                    return factory.methods.senderDeliveries(accounts[0], index).call();\n                  })\n              );\n\n              const receiverDeliveries = await Promise.all(\n                Array(parseInt(receiverDeliveriesCount))\n                  .fill()\n                  .map((delivery, index) => {\n                    return factory.methods.receiverDeliveries(accounts[0], index).call();\n                  })\n              );\n\n            this.setState({ \n                senderDeliveries: senderDeliveries, \n                receiverDeliveries: receiverDeliveries \n            });\n        } finally {\n            this.setState({ loadingPage: false })\n        }\n    }\n\n    renderDeliveryRows(sent) {\n        var deliveries;\n        if (sent) {\n            deliveries = this.state.senderDeliveries;\n        } else {\n            deliveries = this.state.receiverDeliveries;\n        }\n        return deliveries.map((delivery, index) => {\n            return (\n                <DeliveryRow\n                    key={index}\n                    id={index}\n                    delivery={delivery}\n                    sent={sent}\n                />\n            );\n        });\n    }\n\n    render() {\n        // Loading\n        if (this.state.loadingPage) return (\n            <div>\n                <Segment style={{ height: '80vh' }}>\n                    <Dimmer active inverted>\n                        <Loader inverted content='Loading...' />\n                    </Dimmer>\n                </Segment>\n            </div>\n        );\n      \n        // Done\n        return (\n            <div>\n                <h3><Icon name='sign in alternate' circular />&nbsp;Received deliveries</h3>\n                <Table fixed>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>#</Table.HeaderCell>\n                            <Table.HeaderCell>Address</Table.HeaderCell>\n                            <Table.HeaderCell>Sender</Table.HeaderCell>\n                            <Table.HeaderCell>Timestamp</Table.HeaderCell>\n                            <Table.HeaderCell>State</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{this.renderDeliveryRows(false)}</Table.Body>\n                </Table>\n                <h3><Icon name='sign out alternate' circular />&nbsp;Sent deliveries</h3>\n                <Table fixed>\n                    <Table.Header>\n                        <Table.Row>\n                            <Table.HeaderCell>#</Table.HeaderCell>\n                            <Table.HeaderCell>Address</Table.HeaderCell>\n                            <Table.HeaderCell>Receiver</Table.HeaderCell>\n                            <Table.HeaderCell>Timestamp</Table.HeaderCell>\n                            <Table.HeaderCell>State</Table.HeaderCell>\n                            <Table.HeaderCell>Action</Table.HeaderCell>\n                        </Table.Row>\n                    </Table.Header>\n                    <Table.Body>{this.renderDeliveryRows(true)}</Table.Body>\n                </Table>\n                <Link to=\"/deliveries/new\">\n                    <Button\n                        content = \"Send New Delivery\"\n                        icon = \"add circle\"\n                        primary = {true}\n                        />\n                </Link>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { Switch, Route } from 'react-router-dom';\nimport Header from './components/Header';\nimport Home from './pages/Home';\nimport DeliveryNew from './pages/DeliveryNew';\nimport DeliveryShow from './pages/DeliveryShow';\n/*import CampaignNew from './pages/CampaignNew';\nimport CampaignShow from './pages/CampaignShow';\nimport RequestShow from './pages/RequestShow';\nimport RequestNew from './pages/RequestNew';*/\nimport 'semantic-ui-css/semantic.min.css';\n\nclass App extends Component {\n    render() {\n        return (\n            <Container>\n                <Header />\n                <main>\n                    <Switch>\n                        <Route exact path='/' component={Home}/>\n                        <Route exact path='/deliveries/new' component={DeliveryNew}/>\n                        <Route exact path='/deliveries/:address' component={DeliveryShow}/>\n                        {/*<Route exact path='/campaigns/:address' component={CampaignShow}/>\n                        <Route exact path='/campaigns/:address/requests' component={RequestShow}/>\n                        <Route exact path='/campaigns/:address/requests/new' component={RequestNew}/>*/}\n                    </Switch>\n                </main>\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n  \nReactDOM.render((\n    <HashRouter>\n      <App />\n    </HashRouter>\n    ), document.getElementById('root'));\nregisterServiceWorker();\n","import web3 from './web3';\n\n//const path = require(\"path\");\n//const fs = require(\"fs-extra\"); // fs with extra functions\n\nconst DeliveryFactory = require('./build/ConfidentialMultipartyRegisteredEDeliveryWithoutTTPFactory.json');\n\nconst instance = new web3.eth.Contract(\n    JSON.parse(DeliveryFactory.interface),\n    DeliveryFactory.address\n);\n\nexport default instance;","import web3 from './web3';\n\nconst Delivery = require('./build/ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.json');\n\nexport default (address) => {\n    return new web3.eth.Contract(\n        JSON.parse(Delivery.interface),\n        address\n    );\n}"],"sourceRoot":""}