{"version":3,"sources":["ethereum/notification.js","pages/DeliveryNew.js","pages/DeliveryShow.js","ethereum/variables.js","ethereum/web3.js","components/Header.js","components/DeliveryRow.js","pages/Home.js","App.js","registerServiceWorker.js","index.js","ethereum/factory.js"],"names":["Delivery","require","address","web3","eth","Contract","JSON","parse","interface","bigInt","DeliveryNew","state","receiver","message","term1","term2","deposit","loading","errorMessage","onSubmit","event","a","preventDefault","setState","p","variables","substr","g","r","ya","messageSentBuffer","Buffer","from","messageSent","toString","c1","modPow","c2","multiply","getAccounts","accounts","factory","methods","createDelivery","send","value","alert","props","history","push","to","this","error","Field","onChange","target","label","labelPosition","header","content","primary","Component","withRouter","dateFormat","DeliveryShow","sender","start","z1","z2","yb","c","w","componentDidMount","match","params","deliveryContract","notification","getBalance","call","receivers","getState","receiversState","d","Date","setUTCSeconds","xb","wBig","cBig","pBig","c2Big","yaBig","subtract","mod","messageReceived","divide","inverted","active","hidden","readOnly","as","color","horizontal","q","xa","window","Web3","currentProvider","addEventListener","ethereum","request","method","Menu","stackable","style","marginTop","Item","Link","position","DeliveryRow","delivery","onView","onAccept","contractAddress","randBetween","minus","s","accept","onFinish","add","finish","Table","Row","Cell","id","Label","sent","Button","animated","onClick","disabled","Content","visible","Icon","name","Message","Home","loadingPage","getSenderDeliveriesCount","senderDeliveriesCount","getReceiverDeliveriesCount","receiverDeliveriesCount","Promise","all","Array","parseInt","fill","map","index","senderDeliveries","receiverDeliveries","key","Segment","height","Dimmer","Loader","circular","fixed","Header","HeaderCell","Body","renderDeliveryRows","icon","App","Container","exact","path","component","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","DeliveryFactory","instance"],"mappings":"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","file":"static/js/main.3c953869.chunk.js","sourcesContent":["import web3 from './web3';\r\n\r\nconst Delivery = require('./build/ConfidentialMultipartyRegisteredEDeliveryWithoutTTP.json');\r\n\r\nexport default (address) => {\r\n    return new web3.eth.Contract(\r\n        JSON.parse(Delivery.interface),\r\n        address\r\n    );\r\n}","import React, { Component } from 'react';\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Form, Button, Message, Input } from 'semantic-ui-react';\r\nimport factory from '../ethereum/factory';\r\nimport web3 from '../ethereum/web3';\r\nimport variables from '../ethereum/variables';\r\n\r\nconst bigInt = require(\"big-integer\");\r\n\r\nclass DeliveryNew extends Component {\r\n  state = {\r\n    receiver: '',\r\n    message: '',\r\n    term1: '',\r\n    term2: '',\r\n    deposit: '',\r\n    loading: false,\r\n    errorMessage: ''\r\n  };\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    this.setState({ loading: true, errorMessage: '' });\r\n\r\n    try {\r\n        let c1, c2;\r\n        \r\n        // p, g of ElGamal algorithm\r\n        let p = bigInt(variables.p.substr(2), 16)\r\n        let g = bigInt(variables.g.substr(2), 16)\r\n        // Random number r\r\n        let r = bigInt(variables.r.substr(2), 16)\r\n        // ya public key of A\r\n        let ya = bigInt(variables.ya.substr(2), 16)\r\n        \r\n        let messageSentBuffer = Buffer.from(this.state.message, 'utf8');\r\n        let messageSent = bigInt(messageSentBuffer.toString('hex'), 16);\r\n\r\n        // Generation of C1 = g^r mod p\r\n        c1 = g.modPow(r, p);\r\n\r\n        // Generation of C2 = m·ya^r mod p\r\n        c2 = messageSent.multiply(ya.modPow(r, p));\r\n        \r\n        const accounts = await web3.eth.getAccounts();\r\n        await factory.methods\r\n            .createDelivery([this.state.receiver], \"0x\"+c1.toString(16), \"0x\"+c2.toString(16),\r\n              \"0x\"+ya.toString(16), \"0x\"+g.toString(16), \"0x\"+p.toString(16), this.state.term1, \r\n              this.state.term2)\r\n            .send({ from: accounts[0], value: this.state.deposit });\r\n\r\n        alert('Delivery created!');\r\n        // Refresh, using withRouter\r\n        this.props.history.push('/');\r\n    } catch (err) {\r\n        this.setState({ errorMessage: err.message });\r\n    } finally {\r\n        this.setState({ loading: false });\r\n    }\r\n\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Link to='/'>Back</Link>\r\n        <h3>Send New Delivery</h3>\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\r\n          <Form.Field>\r\n            <label>Receiver</label>\r\n            <Input\r\n              value={this.state.receiver}\r\n              onChange={event => this.setState({ receiver: event.target.value })}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Message</label>\r\n            <Input\r\n              value={this.state.message}\r\n              onChange={event => this.setState({ message: event.target.value })}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Term 1</label>\r\n            <Input\r\n              label=\"seconds\"\r\n              labelPosition=\"right\"\r\n              value={this.state.term1}\r\n              onChange={event => this.setState({ term1: event.target.value })}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Term 2</label>\r\n            <Input\r\n              label=\"seconds\"\r\n              labelPosition=\"right\"\r\n              value={this.state.term2}\r\n              onChange={event => this.setState({ term2: event.target.value })}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Deposit</label>\r\n            <Input\r\n              label=\"wei\"\r\n              labelPosition=\"right\"\r\n              value={this.state.deposit}\r\n              onChange={event => this.setState({ deposit: event.target.value })}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\r\n          <Button primary loading={this.state.loading}>\r\n            Send!\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DeliveryNew);\r\n","import React, { Component } from 'react';\r\nimport { withRouter, Link } from \"react-router-dom\";\r\nimport { Form, Button, Message, Input, Dimmer, Loader, Label } from 'semantic-ui-react';\r\nimport notification from '../ethereum/notification';\r\nimport web3 from '../ethereum/web3';\r\nimport variables from '../ethereum/variables';\r\n\r\nconst bigInt = require(\"big-integer\");\r\nconst dateFormat = require('dateformat');\r\n\r\nclass DeliveryShow extends Component {\r\n  state = {\r\n    address: '',\r\n    sender: '',\r\n    receiver: '',\r\n    state: '',\r\n    g: '',\r\n    p: '',\r\n    c1: '',\r\n    c2: '',\r\n    ya: '',\r\n    term1: '',\r\n    term2: '',\r\n    start: '',\r\n    z1: '',\r\n    z2: '',\r\n    yb: '',\r\n    c: '',\r\n    w: '',\r\n    message: '',\r\n    deposit: '',\r\n    loading: false,\r\n    errorMessage: ''\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n\r\n    this.setState({ loading: true, errorMessage: '' });\r\n\r\n    try {\r\n      let address = this.props.match.params.address;\r\n      let deliveryContract = notification(address);\r\n\r\n      let deposit = await web3.eth.getBalance(address)\r\n\r\n      let sender = await deliveryContract.methods.sender().call();\r\n      let receiver = await deliveryContract.methods.receivers(0).call();\r\n      let state = await deliveryContract.methods.getState(receiver).call();\r\n      let g = await deliveryContract.methods.g().call();\r\n      let p = await deliveryContract.methods.p().call();\r\n      let c1 = await deliveryContract.methods.c1().call();\r\n      let c2 = await deliveryContract.methods.c2().call();\r\n      let ya = await deliveryContract.methods.ya().call();\r\n      let term1 = await deliveryContract.methods.term1().call();\r\n      let term2 = await deliveryContract.methods.term2().call();\r\n      let start = await deliveryContract.methods.start().call();\r\n\r\n      let receiversState = await deliveryContract.methods.receiversState(receiver).call();\r\n\r\n      let z1 = receiversState.z1;\r\n      let z2 = receiversState.z2;\r\n      let yb = receiversState.yb;\r\n      let c = receiversState.c;\r\n      let w = receiversState.w;\r\n      let message = '';\r\n\r\n      let d = new Date(0);\r\n      d.setUTCSeconds(start);\r\n      start = dateFormat(d, \"dd/mm/yyyy HH:MM\");\r\n\r\n      // Calcular MESSAGE\r\n      if (w) {\r\n        // TODO: El sender no té Xb\r\n        let xb = bigInt(variables.xb.substr(2), 16);\r\n\r\n        let wBig = bigInt(w.substr(2), 16);\r\n        let cBig = bigInt(c.substr(2), 16);\r\n        let pBig = bigInt(p.substr(2), 16);\r\n        let c2Big = bigInt(c2.substr(2), 16);\r\n        let yaBig = bigInt(ya.substr(2), 16);\r\n        \r\n        let r = wBig.subtract(cBig.multiply(xb.mod(pBig)));  // r = w-c*xb mod q\r\n\r\n        const messageReceived = c2Big.divide(yaBig.modPow(r, pBig));\r\n        message = Buffer.from(messageReceived.toString(16), 'hex');\r\n      }\r\n\r\n      this.setState({ \r\n        address: address,\r\n        sender: sender,\r\n        receiver: receiver,\r\n        state: state,\r\n        g: g,\r\n        p: p,\r\n        c1: c1,\r\n        c2: c2,\r\n        ya: ya,\r\n        term1: term1,\r\n        term2: term2,\r\n        start: start,\r\n        z1: z1,\r\n        z2: z2,\r\n        yb: yb,\r\n        c: c,\r\n        w: w,\r\n        message: message,\r\n        deposit: deposit\r\n      });\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    } finally {\r\n      this.setState({ loading: false });\r\n    }\r\n  }\r\n\r\n  onSubmit = async event => {\r\n    event.preventDefault();\r\n\r\n    // Refresh, using withRouter\r\n    this.props.history.push('/');\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Dimmer inverted active={this.state.loading}>\r\n          <Loader inverted content='Loading...'></Loader>\r\n        </Dimmer>\r\n        <Link to='/'>Back</Link>\r\n        <h3>Show Delivery</h3>\r\n        <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage} hidden={this.state.loading}>\r\n          <Form.Field>\r\n            <label>Address of Smart Contract</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.address}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Sender</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.sender}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Receiver</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.receiver}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>State</label>\r\n            {\r\n              this.state.state==='finished'? \r\n              (\r\n              < Label as='a' color='teal' horizontal>Finished</Label>\r\n              ) : (\r\n                this.state.state==='accepted'? (\r\n                  <Label as='a' color='yellow' horizontal>Accepted</Label>\r\n                ) : (\r\n                  this.state.state==='created'? (\r\n                    <Label as='a' horizontal>Created</Label>\r\n                  ) : (\r\n                    <Label as='a' horizontal>-</Label>\r\n                  )\r\n                )\r\n              )\r\n            }\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>p of ElGamal algorithm</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.p}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>q of ElGamal algorithm</label>\r\n            <Input\r\n              readOnly\r\n              value={variables.q}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>g of ElGamal algorithm</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.g}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>c1 = g^r mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.c1}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>c2 = m·ya^r mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.c2}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>ya, public key of A, ya = g^xa mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.ya}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Term 1</label>\r\n            <Input\r\n              readOnly\r\n              label=\"seconds\"\r\n              labelPosition=\"right\"\r\n              value={this.state.term1}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Term 2</label>\r\n            <Input\r\n              readOnly\r\n              label=\"seconds\"\r\n              labelPosition=\"right\"\r\n              value={this.state.term2}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Start (Timestamp)</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.start}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>z1 = g^s mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.z1}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>z2 = xb·ya^s mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.z2}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>yb, public key of B, yb = g^xb mod p</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.yb}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>c (challenge number)</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.c}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>w = r.add(c.mod(p).multiply(xb.mod(p)).mod(p))</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.w}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Message</label>\r\n            <Input\r\n              readOnly\r\n              value={this.state.message}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Form.Field>\r\n            <label>Deposit</label>\r\n            <Input\r\n              label=\"wei\"\r\n              labelPosition=\"right\"\r\n              value={this.state.deposit}\r\n            />\r\n          </Form.Field>\r\n\r\n          <Message error header=\"ERROR\" content={this.state.errorMessage} />\r\n          <Button primary loading={this.state.loading}>\r\n            Close\r\n          </Button>\r\n        </Form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(DeliveryShow);\r\n","const p = '0xfabb9ab2f0b94831ce41fef46a3e1e0af4f0c30be6a20c6294cf0ed0243d9990b69794b02c7a04c1c34fa4ac36278a9d12805d1e136290d7c9661cc773eca0ef';\r\nconst g = '0x741b99e8d3e6197266cdb8573abbaf241f4d477abeca34889883534d2f6eeb59ffdd3dde12d31be92a9b873df01ed2bf86fc8b5d87ced1b9691cb7f1e9214c8d';\r\nconst q = '0x7d5dcd59785ca418e720ff7a351f0f057a786185f35106314a678768121eccc85b4bca58163d0260e1a7d2561b13c54e89402e8f09b1486be4b30e63b9f65077';\r\nconst xa = '0x171896f638c47b6cb040b7108094a63ee0d427f0918c1f14106589c66e4199e8e0680cd199b676297013a83cdac90f48e00e6dfd1db2e14d0752ab9f65c34099';\r\nconst ya = '0xf700332eaec7576cd02ef93d10c86428ced3f00bd67c69ed997dd4311f7b5dded395c8c4c14340b18099febeaf693fbe1926d79ed8613edb495032f0c4531e7c';\r\nconst r = '0x4677e52e4deb555e3b2356d8a980055283cf94498d02473b28aa56357bcf29cb4e15e419bd8fc337714464dee817e2608dc39981db3ad0f527f2559bdb541827';\r\nconst xb = '0xdafb1fb2f431fdee71309df79b8a15578fe5e6403f82120aa8ba89ed3a093e80ca707ba96ff8499b11002833961aaa7d47152dc4f8c6b4881c2ffffa8563f9';\r\nconst yb = '0x3235c538fd584e4d9089080ccdf7e75a7747bf9e5608965c83877672f9603804649224aff820b662ab6f42331a78138499203e12afeddfdf98f21c3afe099bde';\r\n\r\nexport default {\r\n  p  : p ,\r\n  g  : g ,\r\n  q  : q ,\r\n  xa : xa,\r\n  ya : ya,\r\n  r  : r ,\r\n  xb : xb,\r\n  yb : yb\r\n}\r\n\r\n","import Web3 from 'web3';\r\n\r\nlet web3\r\n\r\nif (window.web3) {\r\n  web3 = new Web3(window.web3.currentProvider);\r\n}\r\n\r\n/*\r\nhttps://medium.com/@parag.chirde/building-a-dapp-on-ethereum-with-vuejs-and-solidity-d01a24b54c1f\r\n\r\nhttps://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\r\n */\r\nwindow.addEventListener(\"load\", async () => {\r\n  // Modern dapp browsers...\r\n  if (window.ethereum) {\r\n    window.web3 = new Web3(window.ethereum);\r\n    try {\r\n      // Request account access if needed\r\n      await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n    } catch (error) {\r\n      alert('User denied account access...');\r\n    }\r\n  }\r\n  // Legacy dapp browsers...\r\n  else if (window.web3) {\r\n    window.web3 = new Web3(web3.currentProvider);\r\n  }\r\n  // Non-dapp browsers...\r\n  else {\r\n    alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\r\n  }\r\n});\r\n\r\nexport default web3;","import React from 'react';\r\nimport { Menu } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default () => {\r\n    return (\r\n        <Menu stackable style={{ marginTop: '10px' }}>\r\n            <Menu.Item as={Link} to='/'>\r\n                Confidential Multiparty Registered eDelivery without TTP\r\n            </Menu.Item>\r\n            <Menu.Menu position=\"right\">\r\n                <Menu.Item as={Link} to='/'>\r\n                    Deliveries\r\n                </Menu.Item>\r\n                <Menu.Item as={Link} to='/deliveries/new'>\r\n                    +\r\n                </Menu.Item>\r\n            </Menu.Menu>\r\n        </Menu>\r\n    );\r\n};","import React, { Component } from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Table, Button, Icon, Message, Label } from 'semantic-ui-react';\r\nimport web3 from '../ethereum/web3';\r\nimport notification from '../ethereum/notification';\r\nimport variables from '../ethereum/variables';\r\n\r\nconst bigInt = require(\"big-integer\");\r\nconst dateFormat = require('dateformat');\r\n\r\nclass DeliveryRow extends Component {\r\n  state = {\r\n    receiver: '',\r\n    start: '',\r\n    state: '',\r\n    loading: false,\r\n    errorMessage: '',\r\n  };\r\n\r\n  componentDidMount = async () => {\r\n    let deliveryContract = notification(this.props.delivery);\r\n    let receiver = await deliveryContract.methods.receivers(0).call();\r\n    let start = await deliveryContract.methods.start().call();\r\n    let state = await deliveryContract.methods.getState(receiver).call();\r\n\r\n    let d = new Date(0);\r\n    d.setUTCSeconds(start);\r\n    start = dateFormat(d, \"dd/mm/yyyy HH:MM\");\r\n\r\n    this.setState({ \r\n      receiver: receiver,\r\n      start: start,\r\n      state: state\r\n    });\r\n  }\r\n\r\n  onView = async () => {\r\n    /*const campaign = Campaign(this.props.address);\r\n\r\n    const accounts = await web3.eth.getAccounts();\r\n    await campaign.methods.approveRequest(this.props.id).send({\r\n      from: accounts[0]\r\n    });*/\r\n  };\r\n\r\n  onAccept = async (contractAddress) => {\r\n\r\n    let c, s, z1, z2;\r\n\r\n    this.setState({ loading: true, errorMessage: '' });\r\n\r\n    try {\r\n      let deliveryContract = notification(contractAddress);\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // q of ElGamal algorithm\r\n      // TODO: Com ho podem saber?\r\n      let q = bigInt(variables.q.substr(2), 16);\r\n      let xb = bigInt(variables.xb.substr(2), 16);\r\n      let yb = bigInt(variables.yb.substr(2), 16);\r\n\r\n      let p = bigInt((await deliveryContract.methods.p().call()).substr(2), 16);\r\n      let g = bigInt((await deliveryContract.methods.g().call()).substr(2), 16);\r\n      let ya = bigInt((await deliveryContract.methods.ya().call()).substr(2), 16);\r\n\r\n      // VARIABLES FOR ACCEPT()\r\n      // Generation of challenge number c\r\n      c = bigInt.randBetween(2, q.minus(1));      // Pot ser mes curt, meitat de bits\r\n      \r\n      // Generation of random number s\r\n      s = bigInt.randBetween(2, q.minus(1));\r\n\r\n      // Generation of z1 = g^s mod p\r\n      z1 = g.modPow(s, p);\r\n      // Generation of z2 = xb·ya^s mod p\r\n      z2 = xb.multiply(ya.modPow(s, p));\r\n      \r\n      await deliveryContract.methods\r\n        .accept(\"0x\"+z1.toString(16), \"0x\"+z2.toString(16), \"0x\"+yb.toString(16), \"0x\"+c.toString(16))\r\n        .send({ from: accounts[0] });\r\n\r\n      // Refresh\r\n      alert('Delivery accepted!');\r\n      this.setState({ state: 'accepted' });\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    } finally {\r\n        this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  onFinish = async (contractAddress) => {\r\n\r\n    let w;\r\n\r\n    this.setState({ loading: true, errorMessage: '' });\r\n\r\n    try {\r\n      let deliveryContract = notification(contractAddress);\r\n\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Random number r\r\n      let r = bigInt(variables.r.substr(2), 16)\r\n      // xb private key of B\r\n      // TODO: Com ho podem saber?\r\n      let xb = bigInt(variables.xb.substr(2), 16)\r\n\r\n      let receiver = await deliveryContract.methods.receivers(0).call();\r\n      let p = bigInt((await deliveryContract.methods.p().call()).substr(2), 16);\r\n      let c = bigInt(((await deliveryContract.methods.receiversState(receiver).call()).c).substr(2), 16);\r\n\r\n      // VARIABLES FOR FINISH()\r\n      //const w = r.add(c.mod(p).multiply(xb.mod(p)).mod(p));\r\n      \r\n      w =  r.add(c.multiply(xb.mod(p)));\r\n      \r\n      await deliveryContract.methods\r\n        .finish(receiver, \"0x\"+w.toString(16))\r\n        .send({ from: accounts[0] });\r\n\r\n      // Refresh\r\n      alert('Delivery finished!');\r\n      this.setState({ state: 'finished' });\r\n    } catch (err) {\r\n      this.setState({ errorMessage: err.message });\r\n    } finally {\r\n        this.setState({ loading: false });\r\n    }\r\n  };\r\n\r\n  render() {\r\n      return (\r\n          <Table.Row>\r\n              <Table.Cell>{this.props.id+1}</Table.Cell>\r\n              <Table.Cell>{this.props.delivery}</Table.Cell>\r\n              <Table.Cell>{this.state.receiver}</Table.Cell>\r\n              <Table.Cell>{this.state.start}</Table.Cell>\r\n              <Table.Cell>\r\n                {\r\n                 this.state.state==='finished'? \r\n                   (\r\n                    <Label as='a' color='teal' horizontal>Finished</Label>\r\n                   ) : (\r\n                    this.state.state==='accepted'? (\r\n                      <Label as='a' color='yellow' horizontal>Accepted</Label>\r\n                    ) : (\r\n                      this.state.state==='created'? (\r\n                        <Label as='a' horizontal>Created</Label>\r\n                      ) : (\r\n                        <Label as='a' horizontal>-</Label>\r\n                      )\r\n                    )\r\n                   )\r\n                 }\r\n              </Table.Cell>\r\n              <Table.Cell>\r\n                  {\r\n                    this.props.sent ? (\r\n                      <Button animated='vertical' color='blue' onClick={() => this.onFinish(this.props.delivery)} disabled={this.state.state!=='accepted'} loading={this.state.loading}>\r\n                        <Button.Content hidden>Finish</Button.Content>\r\n                        <Button.Content visible>\r\n                          <Icon name='send' />\r\n                        </Button.Content>\r\n                      </Button>\r\n                    ) : (\r\n                      <Button animated='vertical' color='blue' onClick={() => this.onAccept(this.props.delivery)} disabled={this.state.state!=='created'} loading={this.state.loading}>\r\n                        <Button.Content hidden>Accept</Button.Content>\r\n                        <Button.Content visible>\r\n                          <Icon name='check' />\r\n                        </Button.Content>\r\n                    </Button>\r\n                    )\r\n                  }\r\n                  <Link to={\"/deliveries/\"+this.props.delivery}>\r\n                    <Button animated='vertical' color='blue' onClick={this.onView}>\r\n                      <Button.Content hidden>View</Button.Content>\r\n                      <Button.Content visible>\r\n                        <Icon name='eye' />\r\n                      </Button.Content>\r\n                    </Button>\r\n                  </Link>\r\n                  <Message error header=\"ERROR\" content={this.state.errorMessage} hidden={!this.state.errorMessage} />\r\n              </Table.Cell>\r\n          </Table.Row>\r\n          \r\n      );\r\n    }\r\n}\r\n\r\nexport default DeliveryRow;\r\n","import React, { Component } from 'react';\r\nimport { Icon, Button, Dimmer, Loader, Segment, Table } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport factory from '../ethereum/factory';\r\nimport web3 from '../ethereum/web3';\r\nimport DeliveryRow from '../components/DeliveryRow';\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        loadingPage: true,\r\n        loading: false,\r\n        errorMessage: ''\r\n    };\r\n\r\n    componentDidMount = async () => {\r\n        try {\r\n            const accounts = await web3.eth.getAccounts();\r\n            const senderDeliveriesCount = await factory.methods.getSenderDeliveriesCount(accounts[0]).call();\r\n            const receiverDeliveriesCount = await factory.methods.getReceiverDeliveriesCount(accounts[0]).call();\r\n\r\n            const senderDeliveries = await Promise.all(\r\n                Array(parseInt(senderDeliveriesCount))\r\n                  .fill()\r\n                  .map((delivery, index) => {\r\n                    return factory.methods.senderDeliveries(accounts[0], index).call();\r\n                  })\r\n              );\r\n\r\n              const receiverDeliveries = await Promise.all(\r\n                Array(parseInt(receiverDeliveriesCount))\r\n                  .fill()\r\n                  .map((delivery, index) => {\r\n                    return factory.methods.receiverDeliveries(accounts[0], index).call();\r\n                  })\r\n              );\r\n\r\n            this.setState({ \r\n                senderDeliveries: senderDeliveries, \r\n                receiverDeliveries: receiverDeliveries \r\n            });\r\n        } finally {\r\n            this.setState({ loadingPage: false })\r\n        }\r\n    }\r\n\r\n    renderDeliveryRows(sent) {\r\n        var deliveries;\r\n        if (sent) {\r\n            deliveries = this.state.senderDeliveries;\r\n        } else {\r\n            deliveries = this.state.receiverDeliveries;\r\n        }\r\n        return deliveries.map((delivery, index) => {\r\n            return (\r\n                <DeliveryRow\r\n                    key={index}\r\n                    id={index}\r\n                    delivery={delivery}\r\n                    sent={sent}\r\n                />\r\n            );\r\n        });\r\n    }\r\n\r\n    render() {\r\n        // Loading\r\n        if (this.state.loadingPage) return (\r\n            <div>\r\n                <Segment style={{ height: '80vh' }}>\r\n                    <Dimmer active inverted>\r\n                        <Loader inverted content='Loading...' />\r\n                    </Dimmer>\r\n                </Segment>\r\n            </div>\r\n        );\r\n      \r\n        // Done\r\n        return (\r\n            <div>\r\n                <h3><Icon name='sign in alternate' circular />&nbsp;Received deliveries</h3>\r\n                <Table fixed>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>#</Table.HeaderCell>\r\n                            <Table.HeaderCell>Address</Table.HeaderCell>\r\n                            <Table.HeaderCell>Sender</Table.HeaderCell>\r\n                            <Table.HeaderCell>Timestamp</Table.HeaderCell>\r\n                            <Table.HeaderCell>State</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>{this.renderDeliveryRows(false)}</Table.Body>\r\n                </Table>\r\n                <h3><Icon name='sign out alternate' circular />&nbsp;Sent deliveries</h3>\r\n                <Table fixed>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>#</Table.HeaderCell>\r\n                            <Table.HeaderCell>Address</Table.HeaderCell>\r\n                            <Table.HeaderCell>Receiver</Table.HeaderCell>\r\n                            <Table.HeaderCell>Timestamp</Table.HeaderCell>\r\n                            <Table.HeaderCell>State</Table.HeaderCell>\r\n                            <Table.HeaderCell>Action</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>{this.renderDeliveryRows(true)}</Table.Body>\r\n                </Table>\r\n                <Link to=\"/deliveries/new\">\r\n                    <Button\r\n                        content = \"Send New Delivery\"\r\n                        icon = \"add circle\"\r\n                        primary = {true}\r\n                        />\r\n                </Link>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Header from './components/Header';\r\nimport Home from './pages/Home';\r\nimport DeliveryNew from './pages/DeliveryNew';\r\nimport DeliveryShow from './pages/DeliveryShow';\r\n/*import CampaignNew from './pages/CampaignNew';\r\nimport CampaignShow from './pages/CampaignShow';\r\nimport RequestShow from './pages/RequestShow';\r\nimport RequestNew from './pages/RequestNew';*/\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Header />\r\n                <main>\r\n                    <Switch>\r\n                        <Route exact path='/' component={Home}/>\r\n                        <Route exact path='/deliveries/new' component={DeliveryNew}/>\r\n                        <Route exact path='/deliveries/:address' component={DeliveryShow}/>\r\n                        {/*<Route exact path='/campaigns/:address' component={CampaignShow}/>\r\n                        <Route exact path='/campaigns/:address/requests' component={RequestShow}/>\r\n                        <Route exact path='/campaigns/:address/requests/new' component={RequestNew}/>*/}\r\n                    </Switch>\r\n                </main>\r\n            </Container>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { HashRouter } from 'react-router-dom';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n  \r\nReactDOM.render((\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n    ), document.getElementById('root'));\r\nregisterServiceWorker();\r\n","import web3 from './web3';\r\n\r\n//const path = require(\"path\");\r\n//const fs = require(\"fs-extra\"); // fs with extra functions\r\n\r\nconst DeliveryFactory = require('./build/ConfidentialMultipartyRegisteredEDeliveryWithoutTTPFactory.json');\r\n\r\nconst instance = new web3.eth.Contract(\r\n    JSON.parse(DeliveryFactory.interface),\r\n    DeliveryFactory.address\r\n);\r\n\r\nexport default instance;"],"sourceRoot":""}